{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Nav.svelte",
    "Quarry.svelte",
    "TerraForm.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { view } from './stores';\nimport Nav from './Nav.svelte';\nimport TerraForm from './TerraForm.svelte';\nimport Quarry from './Quarry.svelte';\n</script>\n\n<style>\n  :global(body) {\n    margin: 0;\n    padding: 0;\n  }\n  /* main {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t} */\n</style>\n\n<main>\n  <!-- <h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p> -->\n  <Nav />\n  {#if $view === 'add-terms'}\n    <TerraForm />\n  {:else if $view === 'query-terms'}\n    <Quarry />\n  {:else}\n    <div>404 lol</div>\n  {/if}\n</main>\n",
    "<script lang=\"ts\">import { view } from './stores';\nconst links = [{ label: 'Add Terms' }];\nexport let visible = false;\n</script>\n\n<style lang=\"scss\">* {\n  margin: 0;\n  padding: 0;\n}\n\nnav {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  background-color: white;\n}\n\nbutton {\n  background: white;\n  outline: none;\n  border: none;\n  padding: 1rem;\n  border-radius: 0;\n}\nbutton:hover {\n  color: #f1c232;\n  background: #5b5b5b;\n  cursor: pointer;\n}\nbutton:active {\n  background: none;\n}\n\nh1 {\n  padding: 0rem 1rem;\n  font-family: \"Bebas Neue\", cursive;\n}\n\na {\n  color: black;\n}\na:hover {\n  text-decoration: none;\n}\n\n.dropdown {\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  width: 100%;\n}\n\n.center {\n  flex: 1;\n}\n\n/* main {\n\ttext-align: center;\n\tpadding: 1em;\n\tmax-width: 240px;\n\tmargin: 0 auto;\n}\n\nh1 {\n\tcolor: #ff3e00;\n\ttext-transform: uppercase;\n\tfont-size: 4em;\n\tfont-weight: 100;\n}\n\n@media (min-width: 640px) {\n\tmain {\n\t\tmax-width: none;\n\t}\n} */</style>\n\n<svelte:head>\n  <link\n    href=\"https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap\"\n    rel=\"stylesheet\" />\n</svelte:head>\n\n<main>\n  <!-- <h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p> -->\n  <nav>\n    <span class=\"left\">\n      <h1><a href=\"/\">Langpest</a></h1></span>\n    <span class=\"center\" />\n    <span class=\"right\"><button\n        on:click={() => {\n          visible = !visible;\n        }}><span>|||</span></button>\n    </span>\n  </nav>\n  {#if visible}\n    <div\n      class=\"dropdown\"\n      on:click={() => {\n        visible = false;\n      }}>\n      <button\n        on:click={() => {\n          $view = 'add-terms';\n        }}><span>Add term</span>\n      </button>\n      <button\n        on:click={() => {\n          $view = 'query-terms';\n        }}><span>Query term</span>\n      </button>\n    </div>\n  {/if}\n</main>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { view } from './stores';\nimport { onMount } from 'svelte';\nlet terms = [];\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    yield createTerm;\n}));\nconst createTerm = () => __awaiter(void 0, void 0, void 0, function* () {\n    const serverRes = yield fetch(`/api/terms`);\n    const resTerm = yield serverRes.json();\n    terms = yield resTerm;\n    yield console.log(terms);\n});\n</script>\n\n<style lang=\"scss\">* {\n  margin: 0;\n  padding: 0;\n}\n\n/* main {\n\ttext-align: center;\n\tpadding: 1em;\n\tmax-width: 240px;\n\tmargin: 0 auto;\n}\n\nh1 {\n\tcolor: #ff3e00;\n\ttext-transform: uppercase;\n\tfont-size: 4em;\n\tfont-weight: 100;\n}\n\n@media (min-width: 640px) {\n\tmain {\n\t\tmax-width: none;\n\t}\n} */\n.wrapper {\n  display: flex;\n}\n\n.left,\n.right {\n  flex: 1;\n}</style>\n\n<main>\n  <div class=\"wrapper\">\n    {#each terms as term}\n      <div>\n        <div class=\"left\">term.content</div>\n        <div class=\"right\">term.description</div>\n      </div>\n    {/each}\n  </div>\n  <!-- <h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p> -->\n</main>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst tempTerm = {\n    content: '',\n    description: '',\n    date: '',\n    category: '',\n    example: '',\n};\n// Here we should finalize the term\n// as well as verify input if need be later on\nconst getTerm = () => {\n    return new Promise((resolve, reject) => {\n        // Create object\n        tempTerm.date = new Date().toString();\n        // Send it as a fetch json request\n        resolve(tempTerm);\n    });\n};\nconst createTerm = () => __awaiter(void 0, void 0, void 0, function* () {\n    // debug\n    const testVar = yield getTerm();\n    yield console.log(testVar);\n    // end debug\n    const term = yield getTerm();\n    // This could possible bug if we have spaces in-between our code\n    const jsonBody = yield JSON.stringify(term);\n    const serverRes = yield fetch(`/api/terms/${term.content}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json;charset=UTF-8' },\n        body: jsonBody,\n    });\n    yield console.log(serverRes);\n});\n</script>\n\n<style>\n  * {\n    padding: 0;\n    margin: 0;\n  }\n  /* main {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\nu}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t} */\n</style>\n\n<main>\n  <!-- <h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p> -->\n  <input type=\"text\" placeholder=\"Term\" bind:value={tempTerm.content} />\n  <input\n    type=\"text\"\n    placeholder=\"Definition\"\n    bind:value={tempTerm.description} />\n  <input type=\"text\" placeholder=\"Tag\" bind:value={tempTerm.category} />\n  <input type=\"text\" placeholder=\"Example\" bind:value={tempTerm.example} />\n  <button on:click={createTerm}>Add</button>\n</main>\n"
  ],
  "names": [],
  "mappings": "AAOU,IAAI,AAAE,CAAC,AACb,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC;ACLgB,cAAE,CAAC,AACpB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,GAAG,cAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,MAAM,CACnB,gBAAgB,CAAE,KAAK,AACzB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,CAAC,AAClB,CAAC,AACD,oBAAM,MAAM,AAAC,CAAC,AACZ,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,OAAO,CACnB,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,oBAAM,OAAO,AAAC,CAAC,AACb,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,WAAW,CAAE,YAAY,CAAC,CAAC,OAAO,AACpC,CAAC,AAED,CAAC,cAAC,CAAC,AACD,KAAK,CAAE,KAAK,AACd,CAAC,AACD,eAAC,MAAM,AAAC,CAAC,AACP,eAAe,CAAE,IAAI,AACvB,CAAC,AAED,SAAS,cAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,AACb,CAAC,AAED,OAAO,cAAC,CAAC,AACP,IAAI,CAAE,CAAC,AACT,CAAC;AC/BkB,eAAE,CAAC,AACpB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AAqBD,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,AACf,CAAC,AAED,oBAAK,CACL,MAAM,eAAC,CAAC,AACN,IAAI,CAAE,CAAC,AACT,CAAC;ACVC,eAAE,CAAC,AACD,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACX,CAAC"
}